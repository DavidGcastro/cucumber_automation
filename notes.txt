Selenium-Grid ---> allows you run your tests on different machines against different browsers in parallel. 
That is, running multiple tests at the same time against different machines running different browsers 
and operating systems. Essentially, Selenium-Grid support distributed test execution. 
It allows for running your tests in a distributed test execution environment.

=======================================================================================================================================================


WD-browserstack ---> WD Integration with BrowserStack.

=======================================================================================================================================================

What is local testing? 

BrowserStack enables you to run automated tests on your internal development environments, on localhost, 
and from behind a corporate firewall. This feature is called "Local Testing".
Local Testing establishes a secure connection between your machine and the BrowserStack cloud. 
Once you set up Local Testing, all URLs work out of the box, including HTTPS URLs and those behind a proxy or firewall.

=======================================================================================================================================================

what is chai? 

Chai is a BDD / TDD assertion library for node and the browser that can be delightfully paired with any javascript testing framework.


=======================================================================================================================================================

what is chai-as-promised? 

Chai as Promised extends Chai with a fluent language for asserting facts about promises.

Instead of manually wiring up your expectations to a promise's fulfilled and rejected handlers:

doSomethingAsync().then(
    function (result) {
        result.should.equal("foo");
        done();
    },
    function (err) {
       done(err);
    }
);

=== 
return doSomethingAsync().should.eventually.equal("foo");

=======================================================================================================================================================

BDD in Cucumber ===>  The main difference is that Cucumber operates on a higher abstraction level, 
closer to the domain and farther away from classes and methods. BDD builds on TDD, while preserving a strong 
link between the business requirements and the technical solution.
This technique is called Outside-in because programmers typically start with the functionality that is closest 
to the user (the user interface, which is on the outside of the system) and gradually work towards the guts of the system (business logic, 
persistence, messaging and so on) as they discover more of what needs to be implemented.

=======================================================================================================================================================

what is a stub in programming? 

A stub is a controllable replacement for an Existing Dependency (or collaborator) in the system. 
By using a stub, you can test your code without dealing with the dependency directly.
External Dependency - Existing Dependency:
It is an object in your system that your code under test interacts with and over which you have no control. 
(Common examples are filesystems, threads, memory, time, and so on.)

Layman's terms, it's dummy data (or fake data, test data...etc.) that you can use to test or develop your code against until you (or the other party) 
is ready to present/receive real data. It's a programmer's "Lorem Ipsum".

Employee database not ready? Make up a simple one with Jane Doe, John Doe...etc. 
API not ready? Make up a fake one by creating a static .json file containing fake data.

=======================================================================================================================================================

What is a test pyramid? 
https://martinfowler.com/bliki/TestPyramid.html

The test pyramid is a way of thinking about different kinds of automated tests should be used to create a balanced portfolio. 
Its essential point is that you should have many more low-level UnitTests 
than high level BroadStackTests running through a GUI.

The pyramid also argues for an intermediate layer of tests that act through a service layer of an application, 
what I refer to as SubcutaneousTests. 

SubcutaneousTests ===>  test that operates just under the UI of an application. This is particulary valuable when doing functional testing of an 
application: when you want to test end-to-end behavior, but it's difficult to test through the UI itself.

Subcutaneous testing can avoid difficulties with hard-to-test presentation technologies and usually is much faster than testing through the UI. 
The big danger is that, unless you are a firm follower of keeping all useful logic out of your UI, 
subcutaneous testing will leave important behavior out of its test.


These can provide many of the advantages of end-to-end tests but avoid many of the 
complexities of dealing with UI frameworks. In web applications this would correspond to testing through an API layer while the top UI part of the 
pyramid would correspond to tests using something like Selenium or Sahi.

=======================================================================================================================================================

What is a non-determinisic test? 

An automated regression suite can play a vital role on a software project, valuable both for reducing defects in production and essential for 
evolutionary design. In talking with development teams I've often heard about the problem of non-deterministic tests - tests that sometimes pass 
and sometimes fail. Left uncontrolled, non-deterministic tests can completely destroy the value of an automated regression suite. In this article 
I outline how to deal with non-deterministic tests. Initially quarantine helps to reduce their damage to other tests,
 but you still have to fix them soon. Therefore I discuss treatments for the common causes for non-determinism: lack of isolation, asynchronous behavior, 
 remote services, time, and resource leaks.

 https://martinfowler.com/articles/nonDeterminism.html

 =======================================================================================================================================================


What are unit tests? 

Unit testing involves breaking your program into pieces, and subjecting each piece to a series of tests.
Usually tests are run as separate programs, but the method of testing varies, depending on the language, and type of software (GUI, command-line, library).
Most languages have unit testing frameworks, you should look into one for yours.
Tests are usually run periodically, often after every change to the source code. The more often the better, because the sooner you will catch problems.

By breaking your program into pieces you can attempt to run an exhaustive examination of your program's capabilities. 
So then you know it works and therefore write fewer bugs as well as fixing bugs with greater speed.

Performing unit tests is designed to be simple, generally the tests are written in the form of functions that will determine whether a 
returned value equals the value you were expecting when you wrote the function (or the value you will expect when you eventually write it - 
this is called Test Driven Development when you write the tests first).


 =======================================================================================================================================================

CUCUMBER BDD ANTI PATTERNS ===> 

1. One anti-pattern is that you write the feature files after you have written the code. This could arguable be the worst anti-pattern when using Gherkin. 
It is very common when you start using Cucumber and BDD. What you really want is to write the Gherkin before you write the software. 
This will allow you to actually use the scenarios to drive the development and not the other way around, to document what you developed.
Why should you write the Gherkin before you write the software? Documenting the wanted behaviour is a way to make sure that everyone agrees on what the software is supposed to do.
When you have reached that agreement, you have a common understanding of the problem, then it is a good time to start the implementation and write the code needed.
Writing code before you have come to a common understanding is one way to make sure you implement something that you will have to change later.

2. Too High Level: 

If a scenario is on a too high level, you can't really trust it. You can probably not tell what it actually will do because it is too high level and vague.

IE: 

Given a bank account
When I withdraw some money
Then the balance should be the original balance minus the amount withdrawn

This is an example that expresses a business rule. It doesn't contain any concrete example.
 We don't know the original balance; we don't know how much that was withdrawn so we can't know the outcome. It is not concrete.


 3. No clear separation between Given/When/Then
It happens that beginners have a hard time grasping the difference between Given, When and Then. The problem is that from a technical perspective, 
there is no difference, Cucumber will treat them all equal.

What is the difference then?

Given is the context - the past
When is an action that changes the system - the present
Then is the expected outcome - the near future

 =======================================================================================================================================================


STEP DEFINITION SCOPE
Step definitions arenâ€™t linked to a particular feature file or scenario. The file, class or package name of a step definition does not affect what Gherkin steps it will match. 
The only thing that matters is the step definitionâ€™s expression.

 =======================================================================================================================================================

Hooks 
Hooks are blocks of code that can run at various points in the Cucumber execution cycle. They are typically used for setup and teardown of the environment before and after each scenario.
Where a hook is defined has no impact on what scenarios or steps it is run for. If you want more fine-grained control, you can use tagged hooks.
You can declare hooks in your features/support/env.js file, or any other file under the features/support directory (for example, in a file called features/support/hooks.js).

Before hooks run before the first step of each scenario.
After hooks run after the last step of each scenario, even when steps are failed, undefined, pending, or skipped.

Tagged hooks
Hooks can be conditionally selected for execution based on the tags of the scenario. To run a particular hook only for certain scenarios, 
you can associate a Before or After Hook with a tag expression.

Before({tags: '@browser and not @headless'}, function () {
})

 =======================================================================================================================================================

Cucumber uses expressions to link a Gherkin Step to a Step Definition. You can use Regular Expressions or Cucumber Expressions.